{"version":3,"file":"static/js/736.09b2862f.chunk.js","mappings":"0RAEMA,EAAWC,EAAAA,GAAAA,GAAH,4EAMRC,EAAWD,EAAAA,GAAAA,GAAH,gEAIRE,EAAcF,EAAAA,GAAAA,IAAH,+DAKXG,EAAYH,EAAAA,GAAAA,GAAH,sBAETI,EAAYJ,EAAAA,GAAAA,EAAH,sB,0BCiDf,EAvDa,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAS,mCAAG,oGAEdJ,GAAa,GAFC,UAGSK,EAAAA,EAAAA,IAAQJ,GAHjB,OAGRK,EAHQ,OAIdV,EAAUU,EAASC,KAAKC,MAJV,gDAMdV,EAAS,EAAD,IANM,yBAQdE,GAAa,GARC,4EAAH,qDAWfI,GAZC,CAaF,GAAE,CAACH,KAGF,gCACGJ,GAASY,EAAAA,GAAAA,MAAA,UAAeZ,EAAMa,UAC9BX,IAAa,SAACY,EAAA,EAAD,IACK,IAAlBhB,EAAOiB,SAAgB,yBAAK,4CAC7B,SAACxB,EAAD,UACGO,GACCA,EAAOkB,KAAI,YAA2D,IAAxDC,EAAuD,EAAvDA,GAAIC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACnD,OACE,UAAC5B,EAAD,YACE,SAACC,EAAD,CACE4B,IACEJ,EAAY,4CAC6BA,GAjCzD,8EAoCcK,IAAKJ,EACLK,MAAM,SAER,SAAC7B,EAAD,UAAYyB,KACZ,SAACxB,EAAD,UAAYyB,MAXCJ,EAclB,QAIV,C,6EChEYH,EAAS,kBACpB,SAAC,KAAD,CACEW,SAAS,EACTC,OAAO,KACPF,MAAM,KACNG,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,YARnC,C,sKCEtBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAFE,6NAIK,IAAMC,EAAY,SAAAC,GACvB,OAAOF,EAAAA,EAAAA,IAAA,0BAA6BE,GACrC,EAEYC,EAAe,SAAAjB,GAC1B,OAAOc,EAAAA,EAAAA,IAAA,iBAAoBd,GAC5B,EAEYT,EAAU,SAAAS,GACrB,OAAOc,EAAAA,EAAAA,IAAA,iBAAoBd,EAApB,YACR,EAEYkB,EAAa,SAAAlB,GACxB,OAAOc,EAAAA,EAAAA,IAAA,iBAAoBd,EAApB,YACR,EAEYmB,EAAsB,SAACC,EAAOC,GACzC,OAAOP,EAAAA,EAAAA,IAAA,8BAAiCM,EAAjC,iBAA+CC,GACvD,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx","helpers/MoviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst CastItem = styled.li`\n  flex-basis: calc((100% - 60px) / 4);\n`;\n\nconst ActorAvatar = styled.img`\n  max-width: 150px;\n  height: 225px;\n`;\n\nconst ActorName = styled.h3``;\n\nconst ActorRole = styled.p``;\n\nexport { CastList, CastItem, ActorAvatar, ActorName, ActorRole };\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'helpers/MoviesAPI';\nimport {\n  ActorAvatar,\n  ActorName,\n  ActorRole,\n  CastItem,\n  CastList,\n} from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { toast } from 'react-toastify';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const getActors = async () => {\n      try {\n        setIsLoading(true);\n        const response = await getCast(movieId);\n        setActors(response.data.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getActors();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && toast.error(`${error.message}`)}\n      {isLoading && <Loader />}\n      {actors.length === 0 && <div>We don't know anything about the cast.</div>}\n      <CastList>\n        {actors &&\n          actors.map(({ id, profile_path, name, original_name, character }) => {\n            return (\n              <CastItem key={id}>\n                <ActorAvatar\n                  src={\n                    profile_path\n                      ? `http://image.tmdb.org/t/p/original${profile_path}`\n                      : defaultImg\n                  }\n                  alt={name}\n                  width=\"150\"\n                />\n                <ActorName>{original_name}</ActorName>\n                <ActorRole>{character}</ActorRole>\n              </CastItem>\n            );\n          })}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n","import { ColorRing } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <ColorRing\n    visible={true}\n    height=\"80\"\n    width=\"80\"\n    ariaLabel=\"blocks-loading\"\n    wrapperStyle={{}}\n    wrapperClass=\"blocks-wrapper\"\n    colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n  />\n);\n","import axios from 'axios';\n\nconst API_KEY =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWZmYTlmNjVjYWUyNWIxZjU5N2IyNDhmZmZiZWQzMiIsInN1YiI6IjY1NGI2NjNhMWFjMjkyN2IyZGNmNzBiYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Wt2WcEuurlXNU4SFGIcSzLE3fb4Vg87kUc19yKbL2iA';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] = API_KEY;\n\nexport const getMovies = time_window => {\n  return axios.get(`/trending/movie/${time_window}`);\n};\n\nexport const getMovieById = id => {\n  return axios.get(`/movie/${id}`);\n};\n\nexport const getCast = id => {\n  return axios.get(`/movie/${id}/credits`);\n};\n\nexport const getReviews = id => {\n  return axios.get(`/movie/${id}/reviews`);\n};\n\nexport const fetchMoviesBySearch = (query, page) => {\n  return axios.get(`/search/movie?query=${query}&page=${page}`);\n};\n"],"names":["CastList","styled","CastItem","ActorAvatar","ActorName","ActorRole","useState","actors","setActors","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","getActors","getCast","response","data","cast","toast","message","Loader","length","map","id","profile_path","name","original_name","character","src","alt","width","visible","height","ariaLabel","wrapperStyle","wrapperClass","colors","axios","getMovies","time_window","getMovieById","getReviews","fetchMoviesBySearch","query","page"],"sourceRoot":""}